{"version":3,"sources":["components/GanttChart.tsx","components/CollapseCard.tsx","pages/Gantt.tsx","pages/Home.tsx","pages/LabelledGantt.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["GanttChart","rows","height","length","width","chartType","loader","data","type","label","options","gantt","trackHeight","animation","duration","easing","startup","rootProps","CollapseCard","title","plans","map","p","start","end","percentage","Progress","str","includes","split","n","num","den","Math","round","parseRatio","Date","Card","Title","Body","Gantt","props","useState","sections","setSections","useEffect","allSections","reduce","acc","cur","push","Container","fluid","s","idx","filter","d","eventKey","to","React","memo","Home","labels","Labels","forEach","l","className","Button","as","Link","variant","onClick","setData","Form","File","onChange","e","target","files","file","fileReader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","wb","xlsx","read","wsname","SheetNames","ws","Sheets","json","utils","sheet_to_json","range","custom","values","setValues","Object","keys","some","ToggleButtonGroup","value","key","ToggleButton","Badge","count","App","setLabels","labelInfo","console","log","path","LabelledGantt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94f6a4dc.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from 'react-google-charts';\nimport { GanttRow } from '../../typings/GanttRow';\nimport '../styles/gantt.css';\n\nfunction GanttChart({ rows }: { rows: GanttRow[] }) {\n    const height = rows.length * 30 + 50;\n    return (\n        // <div className=\"gantt-container\">\n        <Chart\n            width={'100%'}\n            height={height + 'px'}\n            chartType=\"Gantt\"\n            loader={<div>Loading Chart</div>}\n            data={[\n                [\n                    { type: 'string', label: 'Task ID' },\n                    { type: 'string', label: 'Task Name' },\n                    { type: 'string', label: 'Labels' },\n                    { type: 'date', label: 'Start Date' },\n                    { type: 'date', label: 'End Date' },\n                    { type: 'number', label: 'Duration' },\n                    { type: 'number', label: 'Percent Complete' },\n                    { type: 'string', label: 'Dependencies' },\n                ],\n                ...rows,\n            ]}\n            options={{\n                height,\n                width: 1280,\n                gantt: {\n                    trackHeight: 30,\n                },\n                animation: {\n                    duration: 1000,\n                    easing: 'out',\n                    startup: true,\n                },\n            }}\n            rootProps={{ 'data-testid': '2' }}\n        />\n        // </div>\n    );\n}\n\nexport default GanttChart;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { PlannerRow } from '../../typings/PlannerRow';\nimport GanttChart from './GanttChart';\n\ninterface ICollapseCardProps {\n    eventKey: string;\n    title: string;\n    plans: PlannerRow[];\n}\n\nfunction parseRatio(str: string) {\n    if (!str.includes('/')) return 0;\n\n    const [num, den] = str.split('/').map((n) => +n);\n    return 100 * Math.round(num / den);\n}\n\nconst CollapseCard: React.FC<ICollapseCardProps> = ({\n    title = 'Grade 1',\n    plans = [],\n}) => {\n    const rows = plans.map<any>((p) => {\n        const start = p['Start Date'];\n        const end = p['Due Date'];\n\n        const percentage =\n            p.Progress === 'Completed'\n                ? 100\n                : parseRatio(p['Completed Checklist Items']);\n\n        return [\n            p['Task ID'] || '',\n            p['Task Name'] || '',\n            p['Bucket Name'],\n            new Date(start),\n            new Date(end),\n            null,\n            percentage,\n            null,\n        ];\n    });\n\n    return (\n        <Card>\n            <Card.Title>{title}</Card.Title>\n            <Card.Body>\n                <GanttChart rows={rows} />\n            </Card.Body>\n        </Card>\n    );\n};\nexport default CollapseCard;\n","import React, { useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { ILabelInfo } from '../../typings/ILabelInfo';\nimport { PlannerRow } from '../../typings/PlannerRow';\nimport CollapseCard from '../components/CollapseCard';\n\ninterface Props {\n    data: PlannerRow[];\n    labels: ILabelInfo | null;\n}\n\nconst Gantt = (props: Props) => {\n    const [sections, setSections] = useState<string[]>([]);\n\n    useEffect(() => {\n        const allSections = props.data.reduce<string[]>((acc, cur) => {\n            if (!acc.includes(cur['Bucket Name'])) {\n                acc.push(cur['Bucket Name']);\n            }\n            return acc;\n        }, []);\n\n        setSections(allSections);\n    }, [props.data, setSections]);\n\n    if (!props.data.length) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Container fluid>\n            {sections.map((s, idx) => {\n                const plans = props.data\n                    .filter((d) => d['Bucket Name'] === s)\n                    .filter((d) => d.Progress !== 'Not Started')\n                    .filter((d) => {\n                        return d['Start Date'] !== '' && d['Due Date'] !== '';\n                    });\n\n                return (\n                    <CollapseCard\n                        key={`card-${idx}`}\n                        eventKey={'' + idx}\n                        title={s}\n                        plans={plans}\n                    />\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default React.memo(Gantt);\n","import React, { ChangeEvent } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { PlannerRow } from '../../typings/PlannerRow';\nimport { Link } from 'react-router-dom';\nimport xlsx from 'xlsx';\n\nimport '../styles/home.css';\n\ninterface Props {\n    data: PlannerRow[];\n    setData: Function;\n}\n\nconst Home = (props: Props) => {\n    const readFile = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.target.files) return;\n        const file = e.target.files[0];\n        const fileReader = new FileReader();\n\n        fileReader.readAsArrayBuffer(file);\n\n        fileReader.onload = (e) => {\n            if (!e.target) return;\n\n            const arrayBuffer = e.target.result;\n            const wb = xlsx.read(arrayBuffer, {\n                type: 'buffer',\n            });\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            const json = xlsx.utils.sheet_to_json<PlannerRow>(ws, {\n                range: 4,\n            });\n            props.setData(json);\n        };\n    };\n\n    const labels = props.data.reduce<string[]>((acc, cur) => {\n        const ls = cur.Labels.split(';');\n\n        ls.forEach((l) => {\n            if (!acc.includes(l)) {\n                acc.push(l);\n            }\n        });\n\n        return acc;\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            {props.data.length > 0 ? (\n                <>\n                    <div>{labels}</div>\n\n                    <div className=\"actions\">\n                        <Button as={Link} variant=\"primary\" to=\"/gantt\">\n                            View Gantt\n                        </Button>\n\n                        <Button\n                            as={Link}\n                            variant=\"primary\"\n                            to=\"/labelled-gantt\"\n                        >\n                            View Gantt (by labels)\n                        </Button>\n\n                        <Button\n                            variant=\"default\"\n                            onClick={() => {\n                                props.setData([]);\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                    </div>\n                </>\n            ) : (\n                <Form className=\"select-file\">\n                    <Form.File\n                        label=\"Excel file input\"\n                        onChange={readFile}\n                        custom\n                    />\n                </Form>\n            )}\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport {\n    Badge,\n    Button,\n    Container,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { ILabelInfo } from '../../typings/ILabelInfo';\nimport { PlannerRow } from '../../typings/PlannerRow';\nimport CollapseCard from '../components/CollapseCard';\n\ninterface Props {\n    data: PlannerRow[];\n    labels: ILabelInfo | null;\n}\n\nconst Gantt = (props: Props) => {\n    const [values, setValues] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (props.labels) {\n            setValues(Object.keys(props.labels));\n        }\n    }, [props.labels]);\n\n    if (!props.data.length || !props.labels) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const plans = props.data\n        //remove plans not started\n        .filter((d) => d.Progress !== 'Not Started')\n        //remove plans without a start date or due date\n        .filter((d) => {\n            return d['Start Date'] !== '' && d['Due Date'] !== '';\n        })\n        //remove plans before last august\n        .filter((d) => {\n            return new Date(d['Start Date']) > new Date(2020, 6, 1);\n        })\n        //remove plans without the selected labels\n        .filter((d) => {\n            if (!d.Labels) return false;\n\n            return d.Labels.split(';').some((l) => values.includes(l));\n        });\n\n    const labels = props.labels;\n\n    return (\n        <Container fluid>\n            <div>\n                <ToggleButtonGroup\n                    type=\"checkbox\"\n                    value={values}\n                    onChange={(e) => {\n                        setValues(e);\n                    }}\n                    className=\"mb-2\"\n                >\n                    {Object.keys(labels).map((key) => {\n                        let label = labels[key];\n                        return (\n                            <ToggleButton value={label.label}>\n                                {label.label}\n                                <Badge variant=\"light\">{label.count}</Badge>\n                            </ToggleButton>\n                        );\n                    })}\n                </ToggleButtonGroup>\n                <p>{values}</p>\n            </div>\n\n            <CollapseCard\n                eventKey={'' + 0}\n                title={'All Buckets'}\n                plans={plans}\n            />\n        </Container>\n    );\n};\n\nexport default React.memo(Gantt);\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { PlannerRow } from '../typings/PlannerRow';\nimport Gantt from './pages/Gantt';\nimport Home from './pages/Home';\nimport LabelledGantt from './pages/LabelledGantt';\n\ninterface ILabelInfo {\n    [key: string]: {\n        label: string;\n        count: number;\n    };\n}\nfunction App() {\n    const [data, setData] = useState<PlannerRow[]>([]);\n    const [labels, setLabels] = useState<ILabelInfo | null>(null);\n\n    useEffect(() => {\n        const labelInfo = data.reduce<ILabelInfo>((acc, cur) => {\n            const ls = cur.Labels.split(';');\n\n            ls.forEach((l) => {\n                let label = !!l ? l : 'UNLABELED';\n                if (!acc[label]) {\n                    acc[label] = {\n                        label,\n                        count: 1,\n                    };\n                } else {\n                    acc[label].count++;\n                }\n            });\n\n            return acc;\n        }, {});\n\n        setLabels(labelInfo);\n    }, [data]);\n\n    const handleSetData = (json: PlannerRow[]) => {\n        setData(json);\n    };\n\n    console.log(labels);\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/gantt\">\n                    <Gantt data={data} labels={labels} />\n                </Route>\n\n                <Route path=\"/labelled-gantt\">\n                    <LabelledGantt data={data} labels={labels} />\n                </Route>\n\n                <Route path=\"/\">\n                    <Home data={data} setData={handleSetData} />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}